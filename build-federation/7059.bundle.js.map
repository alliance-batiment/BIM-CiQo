{"version":3,"file":"7059.bundle.js","mappings":"mXAAIA,EAAYC,OAAOC,OACnB,SAAkBC,GACd,MAAwB,kBAAVA,GAAsBA,IAAUA,CACjD,EAUL,SAASC,EAAeC,EAAWC,GAC/B,GAAID,EAAUE,SAAWD,EAAWC,OAChC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAUE,OAAQC,IAClC,GAdSC,EAcIJ,EAAUG,GAdPE,EAcWJ,EAAWE,KAbtCC,IAAUC,GAGVV,EAAUS,IAAUT,EAAUU,IAW1B,OAAO,EAfnB,IAAiBD,EAAOC,EAkBpB,OAAO,CACV,CAyBD,MAvBA,SAAoBC,EAAUC,GAE1B,IAAIC,OADY,IAAZD,IAAsBA,EAAUR,GAEpC,IACIU,EADAC,EAAW,GAEXC,GAAa,EAejB,OAdA,WAEI,IADA,IAAIC,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUZ,OAAQW,IACpCD,EAAQC,GAAMC,UAAUD,GAE5B,OAAIF,GAAcH,IAAaO,MAAQR,EAAQK,EAASF,KAGxDD,EAAaH,EAASU,MAAMD,KAAMH,GAClCD,GAAa,EACbH,EAAWO,KACXL,EAAWE,GALAH,CAOd,CAEJ,E,sBCtCKQ,EAFmB,kBAAhBC,aAAuD,oBAApBA,YAAYD,IAGpD,kBAAMC,YAAYD,KADa,EAE/B,kBAAME,KAAKF,KAFf,EAQO,SAASG,EAAcC,GAC5BC,qBAAqBD,EAAUE,GAChC,CAEM,SAASC,EAAeC,EAAoBC,GACjD,IAAMC,EAAQV,IAUd,IAAMI,EAAuB,CAC3BE,GAAIK,uBATN,SAASC,IACHZ,IAAQU,GAASD,EACnBD,EAASK,KAAK,MAEdT,EAAUE,GAAKK,sBAAsBC,EAExC,KAMD,OAAOR,CACR,CClCD,IAAIU,GAAgB,EA0BpB,IAAIC,EAAwC,KAQ5C,SAAgBC,EAAiBC,GAC/B,QAD6E,IAA9CA,IAAAA,GAAwB,GAC/B,OAApBF,GAA4BE,EAAa,CAC3C,IAAMC,EAAWC,SAASC,cAAc,OAClCC,EAAaH,EAASI,MAC5BD,EAAWE,MAAQ,OACnBF,EAAWG,OAAS,OACpBH,EAAWI,SAAW,SACtBJ,EAAWK,UAAY,MAEvB,IAAMC,EAAWR,SAASC,cAAc,OAClCQ,EAAaD,EAASL,MAqB5B,OApBAM,EAAWL,MAAQ,QACnBK,EAAWJ,OAAS,QAEpBN,EAASW,YAAYF,GAEnBR,SAASW,KAA6BD,YAAYX,GAEhDA,EAASa,WAAa,EACxBhB,EAAkB,uBAElBG,EAASa,WAAa,EAEpBhB,EAD0B,IAAxBG,EAASa,WACO,WAEA,sBAIpBZ,SAASW,KAA6BE,YAAYd,GAE7CH,CACR,CAED,OAAOA,CACR,CCuED,IAEMkB,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,EAAgBC,KAAhB,SAAsBC,SAAtB,IACNF,CADjB,EAgBA,SAAwBG,EAATC,GAgCX,MA/BFC,EA+BE,EA/BFA,gBACAC,EA8BE,EA9BFA,6BACAC,EA6BE,EA7BFA,gCACAC,EA4BE,EA5BFA,eACAC,EA2BE,EA3BFA,wBACAC,EA0BE,EA1BFA,uBACAC,EAyBE,EAzBFA,+BACAC,EAwBE,EAxBFA,4BACAC,EAuBE,EAvBFA,aACAC,EAsBE,EAtBFA,aACAC,EAqBE,EArBFA,0BACAC,EAoBE,EApBFA,6BACAC,EAmBE,EAnBFA,kBACAC,EAkBE,EAlBFA,sCACAC,EAiBE,EAjBFA,cAkBA,OAAO,EAAP,YA8BE,WAAYC,GAAiB,aAC3BC,EAAAA,EAAAA,KAAAA,KAAMD,IAAN,MA9BFE,eAAsBL,EAAkBI,EAAKD,OAAN,WA6BVC,EA5B7BE,2BAA+C,KA4BlBF,EA3B7BG,eA2B6B,EAAAH,EAnB7BI,MAAe,CACbC,UAAU,UACVC,aAAa,EACbC,0BAA2B,UAC3B/B,WAC0C,kBAAjCwB,EAAKD,MAAMS,kBACdR,EAAKD,MAAMS,kBACX,EACNC,UACyC,kBAAhCT,EAAKD,MAAMW,iBACdV,EAAKD,MAAMW,iBACX,EACNC,0BAA0B,EAC1BC,wBAAyB,WAMEZ,EAwQ7Ba,0BAxQ6B,EAAAb,EAkR7Ba,qBAAuBC,GACrB,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GARF,OAUItB,EAAKD,MAAMwB,gBAAgD,CAC3DR,yBAAAA,EACAC,wBAAAA,EACAC,sBAAAA,EACAC,qBAAAA,EACAC,wBAAAA,EACAC,uBAAAA,EACAC,qBAAAA,EACAC,oBAAAA,GAnB2B,IAlRJtB,EAyS7BwB,mBAzS6B,EAAAxB,EAgT7BwB,cAAgBV,GACd,SACEtC,EACAiC,EACAF,EACAK,EACAD,GALF,OAOIX,EAAKD,MAAM0B,SAAkC,CAC7ClB,0BAAAA,EACA/B,WAAAA,EACAiC,UAAAA,EACAG,wBAAAA,EACAD,yBAAAA,GAboB,IAhTGX,EAqX7B0B,mBArX6B,EAAA1B,EAsX7B0B,cAAgB,SAAC7C,EAAkBF,GACjC,IAUIZ,EAVJ,EAA8CiC,EAAKD,MAA3C4B,EAAR,EAAQA,YAAaxD,EAArB,EAAqBA,UAAWyD,EAAhC,EAAgCA,UAE1BC,EAAiB7B,EAAK8B,mBAC1BjC,GAAyC8B,EACzC9B,GAAyC1B,EACzC0B,GAAyC+B,GAGrCG,EAASlD,EAAN,IAAkBF,EAG3B,GAAIkD,EAAeG,eAAeD,GAChChE,EAAQ8D,EAAeE,OAClB,CACL,IAAME,EAASjD,EACbgB,EAAKD,MACLpB,EACAqB,EAAKC,gBAEDiC,EAAsB,QAAd/D,EACd0D,EAAeE,GAAOhE,EAAQ,CAC5BoE,SAAU,WACVC,KAAMF,OAAQG,EAAYJ,EAC1BK,MAAOJ,EAAQD,OAASI,EACxBE,IAAK9C,EAAaO,EAAKD,MAAOlB,EAAUmB,EAAKC,gBAC7ChC,OAAQuB,EAAaQ,EAAKD,MAAOlB,EAAUmB,EAAKC,gBAChDjC,MAAOmB,EAAea,EAAKD,MAAOpB,EAAaqB,EAAKC,gBAEvD,CAED,OAAOlC,CArZoB,EAAAiC,EAwZ7B8B,wBAxZ6B,EAAA9B,EAyZ7B8B,mBAAqBhB,GAAW,SAAC0B,EAAQC,EAASC,GAAlB,MAAgC,CAAC,CAAlC,IAzZF1C,EA2f7B2C,UAAY,SAACC,GACX,MAOIA,EAAMC,cANRC,EADF,EACEA,aACAC,EAFF,EAEEA,YACAvE,EAHF,EAGEA,WACAiC,EAJF,EAIEA,UACAuC,EALF,EAKEA,aACAC,EANF,EAMEA,YAEFjD,EAAKkD,UAAS,SAAAC,GACZ,GACEA,EAAU3E,aAAeA,GACzB2E,EAAU1C,YAAcA,EAKxB,OAAO,KAGT,IAAQtC,EAAc6B,EAAKD,MAAnB5B,UAMJiF,EAAuB5E,EAC3B,GAAkB,QAAdL,EACF,OAAQV,KACN,IAAK,WACH2F,GAAwB5E,EACxB,MACF,IAAK,sBACH4E,EAAuBH,EAAcF,EAAcvE,EAMzD4E,EAAuBC,KAAKC,IAC1B,EACAD,KAAKE,IAAIH,EAAsBH,EAAcF,IAE/C,IAAMS,EAAsBH,KAAKC,IAC/B,EACAD,KAAKE,IAAI9C,EAAWuC,EAAeF,IAGrC,MAAO,CACLxC,aAAa,EACbC,0BACE4C,EAAU3E,WAAaA,EAAa,UAAY,WAClDA,WAAY4E,EACZ3C,UAAW+C,EACX5C,wBACEuC,EAAU1C,UAAYA,EAAY,UAAY,WAChDE,0BAA0B,EA/C9B,GAiDGX,EAAKyD,2BArjBmB,EAAAzD,EAwjB7B0D,gBAAkB,SAACC,GACjB,IAAQC,EAAa5D,EAAKD,MAAlB6D,SAER5D,EAAKG,UAAcwD,EAEK,oBAAbC,EACTA,EAASD,GAEG,MAAZC,GACoB,kBAAbA,GACPA,EAAS5B,eAAe,aAExB4B,EAASC,QAAUF,EApkBM,EAAA3D,EAwkB7ByD,2BAA6B,WACa,OAApCzD,EAAKE,4BACPtD,EAAcoD,EAAKE,4BAGrBF,EAAKE,2BAA6BlD,EAChCgD,EAAK8D,kBA/pB0B,IAiFN,EAAA9D,EAmlB7B8D,kBAAoB,WAClB9D,EAAKE,2BAA6B,KAElCF,EAAKkD,SAAS,CAAE5C,aAAa,IAAS,WAGpCN,EAAK8B,oBAAoB,EAH3B,GAtlB2B,GAE5B,EAhCHiC,EAAAA,EAAAA,GAAAA,EAAAA,GAAAC,EAkCSC,yBAAP,SACEC,EACAf,GAIA,OAFAgB,EAAoBD,EAAWf,GAC/BrD,EAAcoE,GACP,IAxCX,2BAAAE,EA2CEC,SAAA,YAMS,IALP7F,EAKO,EALPA,WACAiC,EAIO,EAJPA,eAKmB4B,IAAf7D,IACFA,EAAa6E,KAAKC,IAAI,EAAG9E,SAET6D,IAAd5B,IACFA,EAAY4C,KAAKC,IAAI,EAAG7C,IAG1BlE,KAAK2G,UAAS,SAAAC,GAQZ,YAPmBd,IAAf7D,IACFA,EAAa2E,EAAU3E,iBAEP6D,IAAd5B,IACFA,EAAY0C,EAAU1C,WAItB0C,EAAU3E,aAAeA,GACzB2E,EAAU1C,YAAcA,EAEjB,KAGF,CACLF,0BACE4C,EAAU3E,WAAaA,EAAa,UAAY,WAClDA,WAAYA,EACZiC,UAAWA,EACXE,0BAA0B,EAC1BC,wBACEuC,EAAU1C,UAAYA,EAAY,UAAY,WAtBpD,GAwBGlE,KAAKkH,2BAjFZ,EAAAW,EAoFEE,aAAA,YAQS,QAPPC,MAAAA,OAOO,MAPC,OAOD,EANP5F,EAMO,EANPA,YACAE,EAKO,EALPA,SAMA,EAAiDtC,KAAKwD,MAA9CyE,EAAR,EAAQA,YAAavG,EAArB,EAAqBA,OAAQwG,EAA7B,EAA6BA,SAAUzG,EAAvC,EAAuCA,MACvC,EAAkCzB,KAAK6D,MAA/B5B,EAAR,EAAQA,WAAYiC,EAApB,EAAoBA,UACdiE,ED3RZ,SAAiChH,GAC/B,QADsE,IAAvCA,IAAAA,GAAwB,IACzC,IAAVH,GAAeG,EAAa,CAC9B,IAAMiH,EAAM/G,SAASC,cAAc,OAC7BE,EAAQ4G,EAAI5G,MAClBA,EAAMC,MAAQ,OACdD,EAAME,OAAS,OACfF,EAAMG,SAAW,SAEfN,SAASW,KAA6BD,YAAYqG,GAEpDpH,EAAOoH,EAAIC,YAAcD,EAAI5B,YAE3BnF,SAASW,KAA6BE,YAAYkG,EACrD,CAED,OAAOpH,CACR,CC2Q2BsH,QAEFxC,IAAhB1D,IACFA,EAAc0E,KAAKC,IAAI,EAAGD,KAAKE,IAAI5E,EAAa6F,EAAc,UAE/CnC,IAAbxD,IACFA,EAAWwE,KAAKC,IAAI,EAAGD,KAAKE,IAAI1E,EAAU4F,EAAW,KAGvD,IAAMK,EAAuB1F,EAC3B7C,KAAKwD,MACLxD,KAAK0D,gBAUD8E,EARsB1F,EAC1B9C,KAAKwD,MACLxD,KAAK0D,gBAOiBjC,EAAQ0G,EAAgB,EAC1CM,EACJF,EAAuB7G,EAASyG,EAAgB,EAElDnI,KAAK8H,SAAS,CACZ7F,gBACkB6D,IAAhB1D,EACIW,EACE/C,KAAKwD,MACLpB,EACA4F,EACA/F,EACAjC,KAAK0D,eACL+E,GAEFxG,EACNiC,eACe4B,IAAbxD,EACIU,EACEhD,KAAKwD,MACLlB,EACA0F,EACA9D,EACAlE,KAAK0D,eACL8E,GAEFtE,GA/IZ,EAAA2D,EAmJEa,kBAAA,WACE,MAAgD1I,KAAKwD,MAA7CS,EAAR,EAAQA,kBAAmBE,EAA3B,EAA2BA,iBAE3B,GAAsB,MAAlBnE,KAAK4D,UAAmB,CAC1B,IAAMyD,EAAarH,KAAK4D,UACS,kBAAtBK,IACToD,EAASpF,WAAagC,GAEQ,kBAArBE,IACTkD,EAASnD,UAAYC,EAExB,CAEDnE,KAAK2I,qBAhKT,EAAAd,EAmKEe,mBAAA,WACE,IAAQhH,EAAc5B,KAAKwD,MAAnB5B,UACR,EAA4D5B,KAAK6D,MAAzD5B,EAAR,EAAQA,WAAYiC,EAApB,EAAoBA,UAEpB,GAFA,EAA+BE,0BAEmB,MAAlBpE,KAAK4D,UAAmB,CAItD,IAAMyD,EAAarH,KAAK4D,UACxB,GAAkB,QAAdhC,EACF,OAAQV,KACN,IAAK,WACHmG,EAASpF,YAAcA,EACvB,MACF,IAAK,qBACHoF,EAASpF,WAAaA,EACtB,MACF,QACE,IAAQuE,EAA6Ba,EAA7Bb,YAAaE,EAAgBW,EAAhBX,YACrBW,EAASpF,WAAayE,EAAcF,EAAcvE,OAItDoF,EAASpF,WAAa6E,KAAKC,IAAI,EAAG9E,GAGpCoF,EAASnD,UAAY4C,KAAKC,IAAI,EAAG7C,EAClC,CAEDlE,KAAK2I,qBAhMT,EAAAd,EAmMEgB,qBAAA,WAC0C,OAApC7I,KAAK2D,4BACPtD,EAAcL,KAAK2D,2BArMzB,EAAAkE,EAyMEiB,OAAA,WACE,MAiBI9I,KAAKwD,MAhBPuF,EADF,EACEA,SACAC,EAFF,EAEEA,UACAf,EAHF,EAGEA,YACArG,EAJF,EAIEA,UACAF,EALF,EAKEA,OACAuH,EANF,EAMEA,SACAC,EAPF,EAOEA,iBACAC,EARF,EAQEA,aACAC,EATF,EASEA,SATF,IAUEC,QAAAA,OAVF,MAUYlH,EAVZ,EAWEmH,EAXF,EAWEA,iBACAC,EAZF,EAYEA,aACArB,EAbF,EAaEA,SACA1G,EAdF,EAcEA,MACAgI,EAfF,EAeEA,eACA/H,EAhBF,EAgBEA,MAEMsC,EAAgB/D,KAAK6D,MAArBE,YAER,EAGI/D,KAAKyJ,8BAFPC,EADF,KAEEC,EAFF,KAIA,EAAsC3J,KAAK4J,4BAApCC,EAAP,KAAsBC,EAAtB,KAEMC,EAAQ,GACd,GAAI9B,EAAc,GAAKC,EACrB,IACE,IAAI5F,EAAWuH,EACfvH,GAAYwH,EACZxH,IAEA,IACE,IAAIF,EAAcsH,EAClBtH,GAAeuH,EACfvH,IAEA2H,EAAMC,MACJ1I,EAAAA,EAAAA,eAAcyH,EAAU,CACtB3G,YAAAA,EACAC,KAAM+G,EACNrF,YAAayF,EAAiBzF,OAAc+B,EAC5CN,IAAK6D,EAAQ,CAAEjH,YAAAA,EAAaC,KAAM+G,EAAU9G,SAAAA,IAC5CA,SAAAA,EACAd,MAAOxB,KAAKmF,cAAc7C,EAAUF,MAS9C,IAAMmG,EAAuB1F,EAC3B7C,KAAKwD,MACLxD,KAAK0D,gBAEDuG,EAAsBnH,EAC1B9C,KAAKwD,MACLxD,KAAK0D,gBAGP,OAAOpC,EAAAA,EAAAA,eACLgI,GAAoBC,GAAgB,MACpC,CACEP,UAAAA,EACA9D,SAAUlF,KAAKoG,UACfgB,IAAKpH,KAAKmH,gBACV3F,OAAO,QACLoE,SAAU,WACVlE,OAAAA,EACAD,MAAAA,EACAE,SAAU,OACVuI,wBAAyB,QACzBC,WAAY,YACZvI,UAAAA,GACGJ,KAGPF,EAAAA,EAAAA,eAAc4H,GAAoBC,GAAgB,MAAO,CACvDJ,SAAUgB,EACV3C,IAAK6B,EACLzH,MAAO,CACLE,OAAQ6G,EACR6B,cAAerG,EAAc,YAAS+B,EACtCrE,MAAOwI,KAhSjB,EAAApC,EA+VEc,oBAAA,WACE,MAA6D3I,KAAKwD,MAA1DyE,EAAR,EAAQA,YAAajD,EAArB,EAAqBA,gBAAiBE,EAAtC,EAAsCA,SAAUgD,EAAhD,EAAgDA,SAEhD,GAA+B,oBAApBlD,GACLiD,EAAc,GAAKC,EAAW,EAAG,CACnC,MAKIlI,KAAKyJ,8BAJPjF,EADF,KAEEC,EAFF,KAGEG,EAHF,KAIEC,EAJF,KAMA,EAKI7E,KAAK4J,4BAJPlF,EADF,KAEEC,EAFF,KAGEG,EAHF,KAIEC,EAJF,KAMA/E,KAAKsE,qBACHE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEH,CAGH,GAAwB,oBAAbG,EAAyB,CAClC,MAMIlF,KAAK6D,MALPG,EADF,EACEA,0BACA/B,EAFF,EAEEA,WACAiC,EAHF,EAGEA,UACAE,EAJF,EAIEA,yBACAC,EALF,EAKEA,wBAEFrE,KAAKiF,cACHhD,EACAiC,EACAF,EACAK,EACAD,EAEH,CA5YL,EAAAyD,EAybE4B,4BAAA,WACE,MAMIzJ,KAAKwD,MALPyE,EADF,EACEA,YACAoC,EAFF,EAEEA,oBACAC,EAHF,EAGEA,qBACAC,EAJF,EAIEA,cACArC,EALF,EAKEA,SAEF,EAA+DlI,KAAK6D,MAA5DG,EAAR,EAAQA,0BAA2BD,EAAnC,EAAmCA,YAAa9B,EAAhD,EAAgDA,WAE1CuI,EACJH,GAAuBC,GAAwBC,GAAiB,EAElE,GAAoB,IAAhBtC,GAAkC,IAAbC,EACvB,MAAO,CAAC,EAAG,EAAG,EAAG,GAGnB,IAAMuC,EAAa/H,EACjB1C,KAAKwD,MACLvB,EACAjC,KAAK0D,gBAEDgH,EAAY/H,EAChB3C,KAAKwD,MACLiH,EACAxI,EACAjC,KAAK0D,gBAKDiH,EACH5G,GAA6C,aAA9BC,EAEZ,EADA8C,KAAKC,IAAI,EAAGyD,GAEZI,EACH7G,GAA6C,YAA9BC,EAEZ,EADA8C,KAAKC,IAAI,EAAGyD,GAGlB,MAAO,CACL1D,KAAKC,IAAI,EAAG0D,EAAaE,GACzB7D,KAAKC,IAAI,EAAGD,KAAKE,IAAIiB,EAAc,EAAGyC,EAAYE,IAClDH,EACAC,EAreN,EAAA7C,EAyeE+B,0BAAA,WACE,MAMI5J,KAAKwD,MALPyE,EADF,EACEA,YACAsC,EAFF,EAEEA,cACAM,EAHF,EAGEA,iBACAC,EAJF,EAIEA,kBACA5C,EALF,EAKEA,SAEF,EAA4DlI,KAAK6D,MAAzDE,EAAR,EAAQA,YAAaM,EAArB,EAAqBA,wBAAyBH,EAA9C,EAA8CA,UAExCsG,EACJK,GAAoBC,GAAqBP,GAAiB,EAE5D,GAAoB,IAAhBtC,GAAkC,IAAbC,EACvB,MAAO,CAAC,EAAG,EAAG,EAAG,GAGnB,IAAMuC,EAAatH,EACjBnD,KAAKwD,MACLU,EACAlE,KAAK0D,gBAEDgH,EAAYtH,EAChBpD,KAAKwD,MACLiH,EACAvG,EACAlE,KAAK0D,gBAKDiH,EACH5G,GAA2C,aAA5BM,EAEZ,EADAyC,KAAKC,IAAI,EAAGyD,GAEZI,EACH7G,GAA2C,YAA5BM,EAEZ,EADAyC,KAAKC,IAAI,EAAGyD,GAGlB,MAAO,CACL1D,KAAKC,IAAI,EAAG0D,EAAaE,GACzB7D,KAAKC,IAAI,EAAGD,KAAKE,IAAIkB,EAAW,EAAGwC,EAAYE,IAC/CH,EACAC,EArhBN,EAAO,CAAP,EAA6BK,EAAAA,gBAKpBC,aAAe,CACpBpJ,UAAW,MACXwH,cAAUtD,EACV0D,gBAAgB,GARpB,CA2nBD,CAED,IAAM5B,EAAsB,SAAC,EAAD,GAajB,EAXPmB,SAWO,EAVPnH,UAUO,EATPF,OASO,EARPyH,aAQO,EAPPI,aAOO,EANPe,qBAMO,EALPC,cAKO,EAJPO,kBAIO,EAHPrJ,MAGO,EADPqC,QAZJ,EC/xBMjB,EAA0B,SAAC,EAAD,GAG3B,IAFDqF,EAEC,EAFDA,SACA+C,EACC,EADDA,eAAgBC,EACf,EADeA,mBAAoBC,EACnC,EADmCA,qBAElCC,EAA0B,EAQ9B,GAJID,GAAwBjD,IAC1BiD,EAAuBjD,EAAW,GAGhCiD,GAAwB,EAAG,CAC7B,IAAME,EAAeJ,EAAeE,GACpCC,EAA0BC,EAAa3F,OAAS2F,EAAarK,IAC9D,CAKD,OAAOoK,GAHoBlD,EAAWiD,EAAuB,GACLD,CAlB1D,EAuBMpI,EAAyB,SAAC,EAAD,GAO1B,IANDmF,EAMC,EANDA,YAEAqD,EAIC,EAJDA,kBACAC,EAGC,EAHDA,qBACAC,EAEC,EAFDA,wBAGEJ,EAA0B,EAQ9B,GAJII,GAA2BvD,IAC7BuD,EAA0BvD,EAAc,GAGtCuD,GAA2B,EAAG,CAChC,IAAMH,EAAeC,EAAkBE,GACvCJ,EAA0BC,EAAa3F,OAAS2F,EAAarK,IAC9D,CAKD,OAAOoK,GAHoBnD,EAAcuD,EAA0B,GACXD,CAtB1D,EA2BME,EAAkB,SACtBC,EACAlI,EACAmI,EACAC,GAEA,IAAIC,EAAiBC,EAAUC,EAW/B,GAViB,WAAbL,GACFG,EAAkBD,EAAcN,kBAChCQ,EAAatI,EAAM4B,YACnB2G,EAAoBH,EAAcJ,0BAElCK,EAAkBD,EAAcX,eAChCa,EAAatI,EAAM6B,UACnB0G,EAAoBH,EAAcT,sBAGhCQ,EAAQI,EAAmB,CAC7B,IAAIrG,EAAS,EACb,GAAIqG,GAAqB,EAAG,CAC1B,IAAMV,EAAeQ,EAAgBE,GACrCrG,EAAS2F,EAAa3F,OAAS2F,EAAarK,IAC7C,CAED,IAAK,IAAI5B,EAAI2M,EAAoB,EAAG3M,GAAKuM,EAAOvM,IAAK,CACnD,IAAI4B,EAAO8K,EAAS1M,GAEpByM,EAAgBzM,GAAK,CACnBsG,OAAAA,EACA1E,KAAAA,GAGF0E,GAAU1E,CACX,CAEgB,WAAb0K,EACFE,EAAcJ,wBAA0BG,EAExCC,EAAcT,qBAAuBQ,CAExC,CAED,OAAOE,EAAgBF,EA1CzB,EA6CMK,EAAkB,SACtBN,EACAlI,EACAoI,EACAlG,GAEA,IAAImG,EAAiBE,EAYrB,MAXiB,WAAbL,GACFG,EAAkBD,EAAcN,kBAChCS,EAAoBH,EAAcJ,0BAElCK,EAAkBD,EAAcX,eAChCc,EAAoBH,EAAcT,uBAIlCY,EAAoB,EAAIF,EAAgBE,GAAmBrG,OAAS,IAExCA,EAErBuG,EACLP,EACAlI,EACAoI,EACAG,EACA,EACArG,GAMKwG,EACLR,EACAlI,EACAoI,EACA9E,KAAKC,IAAI,EAAGgF,GACZrG,EArCN,EA0CMuG,EAA8B,SAClCP,EACAlI,EACAoI,EACAO,EACAC,EACA1G,GAEA,KAAO0G,GAAOD,GAAM,CAClB,IAAME,EAASD,EAAMtF,KAAKwF,OAAOH,EAAOC,GAAO,GACzCG,EAAgBd,EACpBC,EACAlI,EACA6I,EACAT,GACAlG,OAEF,GAAI6G,IAAkB7G,EACpB,OAAO2G,EACEE,EAAgB7G,EACzB0G,EAAMC,EAAS,EACNE,EAAgB7G,IACzByG,EAAOE,EAAS,EAEnB,CAED,OAAID,EAAM,EACDA,EAAM,EAEN,CA7BX,EAiCMF,EAAmC,SACvCR,EACAlI,EACAoI,EACAD,EACAjG,GAKA,IAHA,IAAM8G,EAAyB,WAAbd,EAAwBlI,EAAMyE,YAAczE,EAAM0E,SAChEuE,EAAW,EAGbd,EAAQa,GACRf,EAAgBC,EAAUlI,EAAOmI,EAAOC,GAAelG,OAASA,GAEhEiG,GAASc,EACTA,GAAY,EAGd,OAAOR,EACLP,EACAlI,EACAoI,EACA9E,KAAKE,IAAI2E,EAAOa,EAAY,GAC5B1F,KAAKwF,MAAMX,EAAQ,GACnBjG,EAxBJ,EA4BMgH,EAAgC,SACpChB,EACAlI,EACAmI,EACA3D,EACA2E,EACAf,EACAzD,GAEA,IAAMnH,EAAoB,WAAb0K,EAAwBlI,EAAM/B,MAAQ+B,EAAM9B,OACnD2J,EAAeI,EAAgBC,EAAUlI,EAAOmI,EAAOC,GAIvDgB,EACS,WAAblB,EACI5I,EAAuBU,EAAOoI,GAC9B/I,EAAwBW,EAAOoI,GAE/BiB,EAAY/F,KAAKC,IACrB,EACAD,KAAKE,IAAI4F,EAAqB5L,EAAMqK,EAAa3F,SAE7CoH,EAAYhG,KAAKC,IACrB,EACAsE,EAAa3F,OAAS1E,EAAOmH,EAAgBkD,EAAarK,MAW5D,OARc,UAAVgH,IAEAA,EADE2E,GAAgBG,EAAY9L,GAAQ2L,GAAgBE,EAAY7L,EAC1D,OAEA,UAIJgH,GACN,IAAK,QACH,OAAO6E,EACT,IAAK,MACH,OAAOC,EACT,IAAK,SACH,OAAOhG,KAAKiG,MAAMD,GAAaD,EAAYC,GAAa,GAE1D,QACE,OAAIH,GAAgBG,GAAaH,GAAgBE,EACxCF,EACEG,EAAYD,GAIZF,EAAeG,EADjBA,EAIAD,EAtDf,EA2DMG,EAAmBzK,EAAoB,CAC3CE,gBAAiB,SACfe,EACAmI,EACAC,GAHe,OAIJH,EAAgB,SAAUjI,EAAOmI,EAAOC,GAAelG,MALzB,EAO3ChD,6BAA8B,SAC5Bc,EACAvB,EACA2J,GAH4B,OAIjBI,EAAgB,SAAUxI,EAAOoI,EAAe3J,EAXlB,EAa3CU,gCAAiC,SAC/Ba,EACAiH,EACAxI,EACA2J,GAeA,IAbA,IAAQ3D,EAAuBzE,EAAvByE,YAAaxG,EAAU+B,EAAV/B,MAEf4J,EAAeI,EACnB,SACAjI,EACAiH,EACAmB,GAEIiB,EAAY5K,EAAaR,EAE3BiE,EAAS2F,EAAa3F,OAAS2F,EAAarK,KAC5C0J,EAAYD,EAETC,EAAYzC,EAAc,GAAKvC,EAASmH,GAC7CnC,IACAhF,GAAU+F,EAAgB,SAAUjI,EAAOkH,EAAWkB,GAAe5K,KAGvE,OAAO0J,CArCkC,EAwC3C9H,eAAgB,SACdY,EACAmI,EACAC,GAHc,OAIHA,EAAcN,kBAAkBK,GAAO3K,IA5CT,EA8C3C6B,wBAAAA,EACAC,uBAAAA,EAEAC,+BAAgC,SAC9BS,EACAmI,EACA3D,EACA2E,EACAf,EACAzD,GAN8B,OAQ9BuE,EACE,SACAlJ,EACAmI,EACA3D,EACA2E,EACAf,EACAzD,EAhEuC,EAmE3CnF,4BAA6B,SAC3BQ,EACAmI,EACA3D,EACA2E,EACAf,EACAzD,GAN2B,OAQ3BuE,EACE,MACAlJ,EACAmI,EACA3D,EACA2E,EACAf,EACAzD,EAlFuC,EAqF3CjF,aAAc,SACZM,EACAmI,EACAC,GAHY,OAIDH,EAAgB,MAAOjI,EAAOmI,EAAOC,GAAelG,MAzFtB,EA2F3CzC,aAAc,SACZO,EACAmI,EACAC,GAHY,OAIDA,EAAcX,eAAeU,GAAO3K,IA/FN,EAiG3CmC,0BAA2B,SACzBK,EACAU,EACA0H,GAHyB,OAIdI,EAAgB,MAAOxI,EAAOoI,EAAe1H,EArGf,EAuG3Cd,6BAA8B,SAC5BI,EACAiH,EACAvG,EACA0H,GAeA,IAbA,IAAQ1D,EAAqB1E,EAArB0E,SAAUxG,EAAW8B,EAAX9B,OAEZ2J,EAAeI,EACnB,MACAjI,EACAiH,EACAmB,GAEIiB,EAAY3I,EAAYxC,EAE1BgE,EAAS2F,EAAa3F,OAAS2F,EAAarK,KAC5C0J,EAAYD,EAETC,EAAYxC,EAAW,GAAKxC,EAASmH,GAC1CnC,IACAhF,GAAU+F,EAAgB,MAAOjI,EAAOkH,EAAWkB,GAAe5K,KAGpE,OAAO0J,CA/HkC,EAkI3CrH,kBAlI2C,SAkIzBG,EAAmBM,GACnC,MAGMN,EAEAoI,EAAgB,CACpBN,kBAAmB,CAAC,EACpBC,qBAPF,EACEA,sBA9Z8B,GAqa9BL,mBARF,EAEEA,oBA/Z8B,GAsa9BM,yBAA0B,EAC1BL,sBAAuB,EACvBF,eAAgB,CAAC,GAkDnB,OA/CAnH,EAASmJ,sBAAwB,SAC/B7K,EACA8K,QACG,IADHA,IAAAA,GAA8B,GAE9BpJ,EAASqJ,kBAAkB,CAAE/K,YAAAA,EAAa8K,kBAAAA,GAJ5C,EAOApJ,EAASsJ,mBAAqB,SAC5B9K,EACA4K,QACG,IADHA,IAAAA,GAA8B,GAE9BpJ,EAASqJ,kBAAkB,CAAE7K,SAAAA,EAAU4K,kBAAAA,GAJzC,EAOApJ,EAASqJ,kBAAoB,YAQvB,IAPJ/K,EAOI,EAPJA,YACAE,EAMI,EANJA,SAMI,IALJ4K,kBAAAA,OAKI,SACuB,kBAAhB9K,IACTwJ,EAAcJ,wBAA0B1E,KAAKE,IAC3C4E,EAAcJ,wBACdpJ,EAAc,IAGM,kBAAbE,IACTsJ,EAAcT,qBAAuBrE,KAAKE,IACxC4E,EAAcT,qBACd7I,EAAW,IAQfwB,EAASyB,oBAAoB,GAEzB2H,GACFpJ,EAASuJ,aA7Bb,EAiCOzB,CAhMkC,EAmM3CtI,uCAAuC,EAEvCC,cAAe,YAAkD,EAA/C6B,YAA+C,EAAlCC,SAkB9B,IC3XGlD,EAAiB,SAACwJ,EAAetJ,GAAhB,OAA8BsJ,CAArD,EAaA,SAAwB2B,EAATC,GAoBX,MAnBFC,EAmBE,EAnBFA,cACAC,EAkBE,EAlBFA,sBACAC,EAiBE,EAjBFA,YACAhB,EAgBE,EAhBFA,8BACAiB,EAeE,EAfFA,uBACAC,EAcE,EAdFA,0BACAvK,EAaE,EAbFA,kBACAC,EAYE,EAZFA,sCACAC,EAWE,EAXFA,cAYA,OAAO,EAAP,YA2BE,WAAYC,GAAiB,aAC3BC,EAAAA,EAAAA,KAAAA,KAAMD,IAAN,MA3BFE,eAAsBL,EAAkBI,EAAKD,OAAN,WA0BVC,EAzB7BG,eAyB6B,EAAAH,EAxB7BE,2BAA+C,KAwBlBF,EAd7BI,MAAe,CACbC,UAAU,UACVC,aAAa,EACb8J,gBAAiB,UACjBlB,aAC4C,kBAAnClJ,EAAKD,MAAMsK,oBACdrK,EAAKD,MAAMsK,oBACX,EACN1J,0BAA0B,GAMCX,EA0L7Ba,0BA1L6B,EAAAb,EAgM7Ba,qBAAuBC,GACrB,SACEwJ,EACAC,EACAC,EACAC,GAJF,OAMIzK,EAAKD,MAAMwB,gBAAgD,CAC3D+I,mBAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,GAX2B,IAhMJzK,EA+M7BwB,mBA/M6B,EAAAxB,EAoN7BwB,cAAgBV,GACd,SACEsJ,EACAlB,EACAvI,GAHF,OAKIX,EAAKD,MAAM0B,SAAkC,CAC7C2I,gBAAAA,EACAlB,aAAAA,EACAvI,yBAAAA,GAToB,IApNGX,EAsQ7B0B,mBAtQ6B,EAAA1B,EAuQ7B0B,cAAgB,SAACwG,GACf,IAQInK,EARJ,EAAwCiC,EAAKD,MAArC5B,EAAR,EAAQA,UAAWkK,EAAnB,EAAmBA,SAAUqC,EAA7B,EAA6BA,OAEvB7I,EAAiB7B,EAAK8B,mBAC1BjC,GAAyCwI,EACzCxI,GAAyC6K,EACzC7K,GAAyC1B,GAI3C,GAAI0D,EAAeG,eAAekG,GAChCnK,EAAQ8D,EAAeqG,OAClB,CACL,IAAMjG,EAAS8H,EAAc/J,EAAKD,MAAOmI,EAAOlI,EAAKC,gBAC/C1C,EAAO0M,EAAYjK,EAAKD,MAAOmI,EAAOlI,EAAKC,gBAG3C0K,EACU,eAAdxM,GAAyC,eAAXuM,EAE1BxI,EAAsB,QAAd/D,EACRyM,EAAmBD,EAAe1I,EAAS,EACjDJ,EAAeqG,GAASnK,EAAQ,CAC9BoE,SAAU,WACVC,KAAMF,OAAQG,EAAYuI,EAC1BtI,MAAOJ,EAAQ0I,OAAmBvI,EAClCE,IAAMoI,EAAwB,EAAT1I,EACrBhE,OAAS0M,EAAsB,OAAPpN,EACxBS,MAAO2M,EAAepN,EAAO,OAEhC,CAED,OAAOQ,CAvSoB,EAAAiC,EA0S7B8B,wBA1S6B,EAAA9B,EA2S7B8B,mBAAqBhB,GAAW,SAAC0B,EAAQC,EAASC,GAAlB,MAAgC,CAAC,CAAlC,IA3SF1C,EAoV7B6K,oBAAsB,SAACjI,GACrB,MAAiDA,EAAMC,cAA/CE,EAAR,EAAQA,YAAavE,EAArB,EAAqBA,WAAYyE,EAAjC,EAAiCA,YACjCjD,EAAKkD,UAAS,SAAAC,GACZ,GAAIA,EAAU+F,eAAiB1K,EAI7B,OAAO,KAGT,IAAQL,EAAc6B,EAAKD,MAAnB5B,UAEJ+K,EAAe1K,EACnB,GAAkB,QAAdL,EAKF,OAAQV,KACN,IAAK,WACHyL,GAAgB1K,EAChB,MACF,IAAK,sBACH0K,EAAejG,EAAcF,EAAcvE,EAWjD,OALA0K,EAAe7F,KAAKC,IAClB,EACAD,KAAKE,IAAI2F,EAAcjG,EAAcF,IAGhC,CACLzC,aAAa,EACb8J,gBACEjH,EAAU+F,aAAe1K,EAAa,UAAY,WACpD0K,aAAAA,EACAvI,0BAA0B,EArC9B,GAuCGX,EAAKyD,2BA7XmB,EAAAzD,EAgY7B8K,kBAAoB,SAAClI,GACnB,MAAkDA,EAAMC,cAAhDC,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,aAAcvC,EAApC,EAAoCA,UACpCT,EAAKkD,UAAS,SAAAC,GACZ,GAAIA,EAAU+F,eAAiBzI,EAI7B,OAAO,KAIT,IAAMyI,EAAe7F,KAAKC,IACxB,EACAD,KAAKE,IAAI9C,EAAWuC,EAAeF,IAGrC,MAAO,CACLxC,aAAa,EACb8J,gBACEjH,EAAU+F,aAAeA,EAAe,UAAY,WACtDA,aAAAA,EACAvI,0BAA0B,EAnB9B,GAqBGX,EAAKyD,2BAvZmB,EAAAzD,EA0Z7B0D,gBAAkB,SAACC,GACjB,IAAQC,EAAa5D,EAAKD,MAAlB6D,SAER5D,EAAKG,UAAcwD,EAEK,oBAAbC,EACTA,EAASD,GAEG,MAAZC,GACoB,kBAAbA,GACPA,EAAS5B,eAAe,aAExB4B,EAASC,QAAUF,EAtaM,EAAA3D,EA0a7ByD,2BAA6B,WACa,OAApCzD,EAAKE,4BACPtD,EAAcoD,EAAKE,4BAGrBF,EAAKE,2BAA6BlD,EAChCgD,EAAK8D,kBA/e0B,IA+DN,EAAA9D,EAqb7B8D,kBAAoB,WAClB9D,EAAKE,2BAA6B,KAElCF,EAAKkD,SAAS,CAAE5C,aAAa,IAAS,WAGpCN,EAAK8B,oBAAoB,EAAG,KAH9B,GAxb2B,GAE5B,EA7BHiC,EAAAA,EAAAA,GAAAA,EAAAA,GAAAgH,EA+BS9G,yBAAP,SACEC,EACAf,GAIA,OAFAgB,EAAoBD,EAAWf,GAC/BrD,EAAcoE,GACP,IArCX,2BAAAE,EAwCEC,SAAA,SAAS6E,GACPA,EAAe7F,KAAKC,IAAI,EAAG4F,GAE3B3M,KAAK2G,UAAS,SAAAC,GACZ,OAAIA,EAAU+F,eAAiBA,EACtB,KAEF,CACLkB,gBACEjH,EAAU+F,aAAeA,EAAe,UAAY,WACtDA,aAAcA,EACdvI,0BAA0B,EAR9B,GAUGpE,KAAKkH,2BArDZ,EAAAW,EAwDEE,aAAA,SAAa4D,EAAe3D,QAAqC,IAArCA,IAAAA,EAAuB,QACjD,IAAQwE,EAAcxM,KAAKwD,MAAnBgJ,UACAG,EAAiB3M,KAAK6D,MAAtB8I,aAERhB,EAAQ7E,KAAKC,IAAI,EAAGD,KAAKE,IAAI2E,EAAOa,EAAY,IAEhDxM,KAAK8H,SACH4E,EACE1M,KAAKwD,MACLmI,EACA3D,EACA2E,EACA3M,KAAK0D,gBApEb,EAAAmE,EAyEEa,kBAAA,WACE,MAAmD1I,KAAKwD,MAAhD5B,EAAR,EAAQA,UAAWkM,EAAnB,EAAmBA,oBAAqBK,EAAxC,EAAwCA,OAExC,GAAmC,kBAAxBL,GAAsD,MAAlB9N,KAAK4D,UAAmB,CACrE,IAAMyD,EAAarH,KAAK4D,UAEN,eAAdhC,GAAyC,eAAXuM,EAChC9G,EAASpF,WAAa6L,EAEtBzG,EAASnD,UAAY4J,CAExB,CAED9N,KAAK2I,qBAtFT,EAAAd,EAyFEe,mBAAA,WACE,MAA8B5I,KAAKwD,MAA3B5B,EAAR,EAAQA,UAAWuM,EAAnB,EAAmBA,OACnB,EAAmDnO,KAAK6D,MAAhD8I,EAAR,EAAQA,aAER,GAFA,EAAsBvI,0BAE4B,MAAlBpE,KAAK4D,UAAmB,CACtD,IAAMyD,EAAarH,KAAK4D,UAGxB,GAAkB,eAAdhC,GAAyC,eAAXuM,EAChC,GAAkB,QAAdvM,EAIF,OAAQV,KACN,IAAK,WACHmG,EAASpF,YAAc0K,EACvB,MACF,IAAK,qBACHtF,EAASpF,WAAa0K,EACtB,MACF,QACE,IAAQnG,EAA6Ba,EAA7Bb,YAAaE,EAAgBW,EAAhBX,YACrBW,EAASpF,WAAayE,EAAcF,EAAcmG,OAItDtF,EAASpF,WAAa0K,OAGxBtF,EAASnD,UAAYyI,CAExB,CAED3M,KAAK2I,qBA1HT,EAAAd,EA6HEgB,qBAAA,WAC0C,OAApC7I,KAAK2D,4BACPtD,EAAcL,KAAK2D,2BA/HzB,EAAAkE,EAmIEiB,OAAA,WACE,MAiBI9I,KAAKwD,MAhBPuF,EADF,EACEA,SACAC,EAFF,EAEEA,UACApH,EAHF,EAGEA,UACAF,EAJF,EAIEA,OACAuH,EALF,EAKEA,SACAC,EANF,EAMEA,iBACAC,EAPF,EAOEA,aACAqD,EARF,EAQEA,UACApD,EATF,EASEA,SATF,IAUEC,QAAAA,OAVF,MAUYlH,EAVZ,EAWEgM,EAXF,EAWEA,OACA7E,EAZF,EAYEA,iBACAC,EAbF,EAaEA,aACA/H,EAdF,EAcEA,MACAgI,EAfF,EAeEA,eACA/H,EAhBF,EAgBEA,MAEMsC,EAAgB/D,KAAK6D,MAArBE,YAGFqK,EACU,eAAdxM,GAAyC,eAAXuM,EAE1BjJ,EAAWkJ,EACbpO,KAAKsO,oBACLtO,KAAKuO,kBAET,EAAgCvO,KAAKyO,oBAA9BhE,EAAP,KAAmBC,EAAnB,KAEMX,EAAQ,GACd,GAAIyC,EAAY,EACd,IAAK,IAAIb,EAAQlB,EAAYkB,GAASjB,EAAWiB,IAC/C5B,EAAMC,MACJ1I,EAAAA,EAAAA,eAAcyH,EAAU,CACtB1G,KAAM+G,EACN5D,IAAK6D,EAAQsC,EAAOvC,GACpBuC,MAAAA,EACA5H,YAAayF,EAAiBzF,OAAc+B,EAC5CtE,MAAOxB,KAAKmF,cAAcwG,MAQlC,IAAMiB,EAAqBa,EACzBzN,KAAKwD,MACLxD,KAAK0D,gBAGP,OAAOpC,EAAAA,EAAAA,eACLgI,GAAoBC,GAAgB,MACpC,CACEP,UAAAA,EACA9D,SAAAA,EACAkC,IAAKpH,KAAKmH,gBACV3F,OAAO,QACLoE,SAAU,WACVlE,OAAAA,EACAD,MAAAA,EACAE,SAAU,OACVuI,wBAAyB,QACzBC,WAAY,YACZvI,UAAAA,GACGJ,KAGPF,EAAAA,EAAAA,eAAc4H,GAAoBC,GAAgB,MAAO,CACvDJ,SAAUgB,EACV3C,IAAK6B,EACLzH,MAAO,CACLE,OAAQ0M,EAAe,OAASxB,EAChCxC,cAAerG,EAAc,YAAS+B,EACtCrE,MAAO2M,EAAexB,EAAqB,UA/MrD,EAAA/E,EA4PEc,oBAAA,WACE,GAA0C,oBAA/B3I,KAAKwD,MAAMwB,iBACEhF,KAAKwD,MAAnBgJ,UACQ,EAAG,CACjB,MAKIxM,KAAKyO,oBAJPV,EADF,KAEEC,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAMAlO,KAAKsE,qBACHyJ,EACAC,EACAC,EACAC,EAEH,CAGH,GAAmC,oBAAxBlO,KAAKwD,MAAM0B,SAAyB,CAC7C,MAIIlF,KAAK6D,MAHPgK,EADF,EACEA,gBACAlB,EAFF,EAEEA,aACAvI,EAHF,EAGEA,yBAEFpE,KAAKiF,cACH4I,EACAlB,EACAvI,EAEH,CA1RL,EAAAyD,EAwUE4G,kBAAA,WACE,MAAqCzO,KAAKwD,MAAlCgJ,EAAR,EAAQA,UAAWjC,EAAnB,EAAmBA,cACnB,EAAuDvK,KAAK6D,MAApDE,EAAR,EAAQA,YAAa8J,EAArB,EAAqBA,gBAAiBlB,EAAtC,EAAsCA,aAEtC,GAAkB,IAAdH,EACF,MAAO,CAAC,EAAG,EAAG,EAAG,GAGnB,IAAM/B,EAAakD,EACjB3N,KAAKwD,MACLmJ,EACA3M,KAAK0D,gBAEDgH,EAAYkD,EAChB5N,KAAKwD,MACLiH,EACAkC,EACA3M,KAAK0D,gBAKDiH,EACH5G,GAAmC,aAApB8J,EAEZ,EADA/G,KAAKC,IAAI,EAAGwD,GAEZK,EACH7G,GAAmC,YAApB8J,EAEZ,EADA/G,KAAKC,IAAI,EAAGwD,GAGlB,MAAO,CACLzD,KAAKC,IAAI,EAAG0D,EAAaE,GACzB7D,KAAKC,IAAI,EAAGD,KAAKE,IAAIwF,EAAY,EAAG9B,EAAYE,IAChDH,EACAC,EA3WN,EAAO,CAAP,EAA6BK,EAAAA,eAA7B,EAKSC,aAAe,CACpBpJ,UAAW,MACXwH,cAAUtD,EACVqI,OAAQ,WACR5D,cAAe,EACff,gBAAgB,GAVpB,CA0dD,CAQD,IAAM5B,EAAsB,SAAC,EAAD,GAWjB,EATPmB,SASO,EARPnH,UAQO,EAPPF,OAOO,EANPyM,OAMO,EALPhF,aAKO,EAJPI,aAIO,EAHP9H,MAGO,EADPqC,QAVJ,ECvmBM2H,EAAkB,SACtBjI,EACAmI,EACAC,GAEA,IAAQE,EAAetI,EAAfsI,SACAD,EAAuCD,EAAvCC,gBAAiBE,EAAsBH,EAAtBG,kBAEzB,GAAIJ,EAAQI,EAAmB,CAC7B,IAAIrG,EAAS,EACb,GAAIqG,GAAqB,EAAG,CAC1B,IAAMV,EAAeQ,EAAgBE,GACrCrG,EAAS2F,EAAa3F,OAAS2F,EAAarK,IAC7C,CAED,IAAK,IAAI5B,EAAI2M,EAAoB,EAAG3M,GAAKuM,EAAOvM,IAAK,CACnD,IAAI4B,EAAS8K,EAAgC1M,GAE7CyM,EAAgBzM,GAAK,CACnBsG,OAAAA,EACA1E,KAAAA,GAGF0E,GAAU1E,CACX,CAED4K,EAAcG,kBAAoBJ,CACnC,CAED,OAAOE,EAAgBF,EA7BzB,EAgEMM,EAA8B,SAClCzI,EACAoI,EACAO,EACAC,EACA1G,GAEA,KAAO0G,GAAOD,GAAM,CAClB,IAAME,EAASD,EAAMtF,KAAKwF,OAAOH,EAAOC,GAAO,GACzCG,EAAgBd,EAAgBjI,EAAO6I,EAAQT,GAAelG,OAEpE,GAAI6G,IAAkB7G,EACpB,OAAO2G,EACEE,EAAgB7G,EACzB0G,EAAMC,EAAS,EACNE,EAAgB7G,IACzByG,EAAOE,EAAS,EAEnB,CAED,OAAID,EAAM,EACDA,EAAM,EAEN,CAvBX,EA2BMF,EAAmC,SACvC1I,EACAoI,EACAD,EACAjG,GAKA,IAHA,IAAQ8G,EAAchJ,EAAdgJ,UACJC,EAAW,EAGbd,EAAQa,GACRf,EAAgBjI,EAAOmI,EAAOC,GAAelG,OAASA,GAEtDiG,GAASc,EACTA,GAAY,EAGd,OAAOR,EACLzI,EACAoI,EACA9E,KAAKE,IAAI2E,EAAOa,EAAY,GAC5B1F,KAAKwF,MAAMX,EAAQ,GACnBjG,EAtBJ,EA0BM+H,EAAwB,SAAC,EAAD,GAGzB,IAFDjB,EAEC,EAFDA,UACAX,EACC,EADDA,gBAAiB6C,EAChB,EADgBA,kBAAmB3C,EACnC,EADmCA,kBAElC4C,EAA2B,EAQ/B,GAJI5C,GAAqBS,IACvBT,EAAoBS,EAAY,GAG9BT,GAAqB,EAAG,CAC1B,IAAMV,EAAeQ,EAAgBE,GACrC4C,EAA2BtD,EAAa3F,OAAS2F,EAAarK,IAC/D,CAKD,OAAO2N,GAHoBnC,EAAYT,EAAoB,GACH2C,CAlB1D,EAuBME,EAAmBtB,EAAoB,CAC3CE,cAAe,SACbhK,EACAmI,EACAC,GAHa,OAIFH,EAAgBjI,EAAOmI,EAAOC,GAAelG,MALf,EAO3CgI,YAAa,SACXlK,EACAmI,EACAC,GAHW,OAIAA,EAAcC,gBAAgBF,GAAO3K,IAXP,EAa3CyM,sBAAAA,EAEAf,8BAA+B,SAC7BlJ,EACAmI,EACA3D,EACA2E,EACAf,GAEA,IAAQhK,EAAqC4B,EAArC5B,UAAWF,EAA0B8B,EAA1B9B,OAAQyM,EAAkB3K,EAAlB2K,OAAQ1M,EAAU+B,EAAV/B,MAI7BT,EAD6B,eAAdY,GAAyC,eAAXuM,EACpB1M,EAAQC,EACjC2J,EAAeI,EAAgBjI,EAAOmI,EAAOC,GAI7CgB,EAAqBa,EAAsBjK,EAAOoI,GAElDiB,EAAY/F,KAAKC,IACrB,EACAD,KAAKE,IAAI4F,EAAqB5L,EAAMqK,EAAa3F,SAE7CoH,EAAYhG,KAAKC,IACrB,EACAsE,EAAa3F,OAAS1E,EAAOqK,EAAarK,MAc5C,OAXc,UAAVgH,IAKAA,EAHA2E,GAAgBG,EAAY9L,GAC5B2L,GAAgBE,EAAY7L,EAEpB,OAEA,UAIJgH,GACN,IAAK,QACH,OAAO6E,EACT,IAAK,MACH,OAAOC,EACT,IAAK,SACH,OAAOhG,KAAKiG,MAAMD,GAAaD,EAAYC,GAAa,GAE1D,QACE,OAAIH,GAAgBG,GAAaH,GAAgBE,EACxCF,EACEA,EAAeG,EACjBA,EAEAD,EAnE4B,EAwE3Cc,uBAAwB,SACtBnK,EACAkC,EACAkG,GAHsB,OApLF,SACtBpI,EACAoI,EACAlG,GAEA,IAAQmG,EAAuCD,EAAvCC,gBAAiBE,EAAsBH,EAAtBG,kBAKzB,OAFEA,EAAoB,EAAIF,EAAgBE,GAAmBrG,OAAS,IAExCA,EAErBuG,EACLzI,EACAoI,EACAG,EACA,EACArG,GAMKwG,EACL1I,EACAoI,EACA9E,KAAKC,IAAI,EAAGgF,GACZrG,EA3BN,CAwLesG,CAAgBxI,EAAOoI,EAAelG,EA5ER,EA8E3CkI,0BAA2B,SACzBpK,EACAiH,EACAkC,EACAf,GAaA,IAXA,IAAQhK,EAAgD4B,EAAhD5B,UAAWF,EAAqC8B,EAArC9B,OAAQ8K,EAA6BhJ,EAA7BgJ,UAAW2B,EAAkB3K,EAAlB2K,OAAQ1M,EAAU+B,EAAV/B,MAIxCT,EAD6B,eAAdY,GAAyC,eAAXuM,EACpB1M,EAAQC,EACjC2J,EAAeI,EAAgBjI,EAAOiH,EAAYmB,GAClDiB,EAAYF,EAAe3L,EAE7B0E,EAAS2F,EAAa3F,OAAS2F,EAAarK,KAC5C0J,EAAYD,EAETC,EAAY8B,EAAY,GAAK9G,EAASmH,GAC3CnC,IACAhF,GAAU+F,EAAgBjI,EAAOkH,EAAWkB,GAAe5K,KAG7D,OAAO0J,CApGkC,EAuG3CrH,kBAvG2C,SAuGzBG,EAAmBM,GACnC,IAEM8H,EAAgB,CACpBC,gBAAiB,CAAC,EAClB6C,kBAJ8BlL,EAAxBkL,mBAvQwB,GA4Q9B3C,mBAAoB,GAuBtB,OApBAjI,EAAS+K,gBAAkB,SACzBlD,EACAuB,QACG,IADHA,IAAAA,GAA8B,GAE9BtB,EAAcG,kBAAoBjF,KAAKE,IACrC4E,EAAcG,kBACdJ,EAAQ,GAOV7H,EAASyB,oBAAoB,GAEzB2H,GACFpJ,EAASuJ,aAhBb,EAoBOzB,CApIkC,EAuI3CtI,uCAAuC,EAEvCC,cAAe,YAAoC,EAAjCuI,QAUjB,IClTGgD,EAAgBvM,EAAoB,CACxCE,gBAAiB,WAA8BkJ,GAA9B,OACfA,EADe,EAAGvG,WADoB,EAIxCxC,eAAgB,WAA8B+I,GAA9B,SAAGvG,WAJqB,EAOxClC,aAAc,WAA4ByI,GAA5B,OACZA,EADY,EAAGtG,SAPuB,EAUxCpC,aAAc,WAA4B0I,GAA5B,SAAGtG,SAVuB,EAaxCxC,wBAAyB,gBAAGqF,EAAH,EAAGA,SAAH,SAAa7C,UACP6C,CAdS,EAgBxCpF,uBAAwB,gBAAGmF,EAAH,EAAGA,YAAH,SAAgB7C,YACP6C,CAjBO,EAmBxClF,+BAAgC,WAE9BX,EACA4F,EACA/F,EACA2J,EACAzD,GACW,IANTF,EAMS,EANTA,YAAa7C,EAMJ,EANIA,YAAa3D,EAMjB,EANiBA,MAOtBsN,EAAmBjI,KAAKC,IAC5B,EACAkB,EAAgB7C,EAA6B3D,GAEzCoL,EAAY/F,KAAKE,IACrB+H,EACA3M,EAAgBgD,GAEZ0H,EAAYhG,KAAKC,IACrB,EACA3E,EAAgBgD,EACd3D,EACA0G,EACE/C,GAWN,OARc,UAAV4C,IAEAA,EADE/F,GAAc6K,EAAYrL,GAASQ,GAAc4K,EAAYpL,EACvD,OAEA,UAIJuG,GACN,IAAK,QACH,OAAO6E,EACT,IAAK,MACH,OAAOC,EACT,IAAK,SAGH,IAAMkC,EAAelI,KAAKiG,MACxBD,GAAaD,EAAYC,GAAa,GAExC,OAAIkC,EAAelI,KAAKmI,KAAKxN,EAAQ,GAC5B,EACEuN,EAAeD,EAAmBjI,KAAKwF,MAAM7K,EAAQ,GACvDsN,EAEAC,EAGX,QACE,OAAI/M,GAAc6K,GAAa7K,GAAc4K,EACpC5K,EACE6K,EAAYD,GAIZ5K,EAAa6K,EADfA,EAIAD,EAhFyB,EAqFxC7J,4BAA6B,WAE3BV,EACA0F,EACA9D,EACA0H,EACAzD,GACW,IANT9C,EAMS,EANTA,UAAW3D,EAMF,EANEA,OAAQwG,EAMV,EANUA,SAOfgH,EAAgBpI,KAAKC,IACzB,EACAmB,EAAa7C,EAA2B3D,GAEpCmL,EAAY/F,KAAKE,IACrBkI,EACA5M,EAAa+C,GAETyH,EAAYhG,KAAKC,IACrB,EACAzE,EAAa+C,EACX3D,EACAyG,EACE9C,GAWN,OARc,UAAV2C,IAEAA,EADE9D,GAAa4I,EAAYpL,GAAUwC,GAAa2I,EAAYnL,EACtD,OAEA,UAIJsG,GACN,IAAK,QACH,OAAO6E,EACT,IAAK,MACH,OAAOC,EACT,IAAK,SAGH,IAAMkC,EAAelI,KAAKiG,MACxBD,GAAaD,EAAYC,GAAa,GAExC,OAAIkC,EAAelI,KAAKmI,KAAKvN,EAAS,GAC7B,EACEsN,EAAeE,EAAgBpI,KAAKwF,MAAM5K,EAAS,GACrDwN,EAEAF,EAGX,QACE,OAAI9K,GAAa4I,GAAa5I,GAAa2I,EAClC3I,EACE4I,EAAYD,GAIZ3I,EAAY4I,EADdA,EAIAD,EAlJyB,EAuJxCnK,6BAA8B,WAE5BT,GAF4B,IAC1BmD,EAD0B,EAC1BA,YAAa6C,EADa,EACbA,YADa,OAI5BnB,KAAKC,IACH,EACAD,KAAKE,IACHiB,EAAc,EACdnB,KAAKwF,MAAMrK,EAAemD,IA/JQ,EAmKxCzC,gCAAiC,WAE/B8H,EACAxI,GACW,IAHTmD,EAGS,EAHTA,YAAa6C,EAGJ,EAHIA,YAAaxG,EAGjB,EAHiBA,MAItBoE,EAAO4E,EAAerF,EACtB+J,EAAoBrI,KAAKmI,MAC5BxN,EAAQQ,EAAa4D,GAAUT,GAElC,OAAO0B,KAAKC,IACV,EACAD,KAAKE,IACHiB,EAAc,EACdwC,EAAa0E,EAAoB,GAhLC,EAqLxChM,0BAA2B,WAEzBe,GAFyB,IACvBmB,EADuB,EACvBA,UAAW6C,EADY,EACZA,SADY,OAIzBpB,KAAKC,IACH,EACAD,KAAKE,IAAIkB,EAAW,EAAGpB,KAAKwF,MAAMpI,EAAcmB,IA3LZ,EA8LxCjC,6BAA8B,WAE5BqH,EACAvG,GACW,IAHTmB,EAGS,EAHTA,UAAW6C,EAGF,EAHEA,SAAUxG,EAGZ,EAHYA,OAIjBsE,EAAMyE,EAAepF,EACrB+J,EAAiBtI,KAAKmI,MACzBvN,EAASwC,EAAY8B,GAASX,GAEjC,OAAOyB,KAAKC,IACV,EACAD,KAAKE,IACHkB,EAAW,EACXuC,EAAa2E,EAAiB,GA3MI,EAgNxC/L,kBAhNwC,SAgNtBG,GAhNsB,EAoNxCF,uCAAuC,EAEvCC,cAAe,YAAkD,EAA/C6B,YAA+C,EAAlCC,SAoB9B,IC1OGgK,EAAgB/B,EAAoB,CACxCE,cAAe,WAA2B7B,GAA3B,OACbA,EADa,EAAGG,QADsB,EAIxC4B,YAAa,WAA2B/B,GAA3B,SAAGG,QAJwB,EAOxC2B,sBAAuB,gBAAGjB,EAAH,EAAGA,UAAH,SAAcV,SACPU,CARU,EAUxCE,8BAA+B,WAE7Bf,EACA3D,EACA2E,GACW,IAJT/K,EAIS,EAJTA,UAAWF,EAIF,EAJEA,OAAQ8K,EAIV,EAJUA,UAAWV,EAIrB,EAJqBA,SAAUqC,EAI/B,EAJ+BA,OAAQ1M,EAIvC,EAJuCA,MAO5CT,EAD6B,eAAdY,GAAyC,eAAXuM,EACpB1M,EAAQC,EACjC4N,EAAiBxI,KAAKC,IAC1B,EACAyF,EAAcV,EAA0B9K,GAEpC6L,EAAY/F,KAAKE,IACrBsI,EACA3D,EAAUG,GAENgB,EAAYhG,KAAKC,IACrB,EACA4E,EAAUG,EAA0B9K,EAAS8K,GAc/C,OAXc,UAAV9D,IAKAA,EAHA2E,GAAgBG,EAAY9L,GAC5B2L,GAAgBE,EAAY7L,EAEpB,OAEA,UAIJgH,GACN,IAAK,QACH,OAAO6E,EACT,IAAK,MACH,OAAOC,EACT,IAAK,SAGH,IAAMkC,EAAelI,KAAKiG,MACxBD,GAAaD,EAAYC,GAAa,GAExC,OAAIkC,EAAelI,KAAKmI,KAAKjO,EAAO,GAC3B,EACEgO,EAAeM,EAAiBxI,KAAKwF,MAAMtL,EAAO,GACpDsO,EAEAN,EAIX,QACE,OAAIrC,GAAgBG,GAAaH,GAAgBE,EACxCF,EACEA,EAAeG,EACjBA,EAEAD,EArEyB,EA0ExCc,uBAAwB,WAEtBjI,GAFsB,IACpB8G,EADoB,EACpBA,UAAWV,EADS,EACTA,SADS,OAItBhF,KAAKC,IACH,EACAD,KAAKE,IAAIwF,EAAY,EAAG1F,KAAKwF,MAAM5G,EAAWoG,IAhFV,EAmFxC8B,0BAA2B,WAEzBnD,EACAkC,GACW,IAHT/K,EAGS,EAHTA,UAAWF,EAGF,EAHEA,OAAQ8K,EAGV,EAHUA,UAAWV,EAGrB,EAHqBA,SAAUqC,EAG/B,EAH+BA,OAAQ1M,EAGvC,EAHuCA,MAM5CiE,EAAS+E,EAAeqB,EACxB9K,EAF6B,eAAdY,GAAyC,eAAXuM,EAEpB1M,EAAQC,EACjC6N,EAAkBzI,KAAKmI,MAC1BjO,EAAO2L,EAAejH,GAAYoG,GAErC,OAAOhF,KAAKC,IACV,EACAD,KAAKE,IACHwF,EAAY,EACZ/B,EAAa8E,EAAkB,GAnGG,EAwGxClM,kBAxGwC,SAwGtBG,GAxGsB,EA4GxCF,uCAAuC,EAEvCC,cAAe,YAAoC,EAAjCuI,QAUjB,IC1HH,SAAwB0D,EAAeC,EAAcC,GACnD,IAAK,IAAIC,KAAaF,EACpB,KAAME,KAAaD,GACjB,OAAO,EAGX,IAAK,IAAIC,KAAaD,EACpB,GAAID,EAAKE,KAAeD,EAAKC,GAC3B,OAAO,EAGX,OAAO,CACR,C,4BCTD,SAAwBC,EACtBC,EACAlI,GAEA,IAAemI,EAA2BD,EAAlCrO,MAAqBuO,GAA7B,OAA0CF,EAA1C,GACeG,EAA2BrI,EAAlCnG,MAAqByO,GAA7B,OAA0CtI,EAA1C,GAEA,OACG6H,EAAeM,EAAWE,KAAeR,EAAeO,EAAUE,EAEtE,CCTD,SAAwBC,EACtBvI,EACAwI,GAEA,OACGP,EAAS5P,KAAKwD,MAAOmE,IAAc6H,EAAexP,KAAK6D,MAAOsM,EAElE,C","sources":["webpack://ciqo/./node_modules/memoize-one/dist/memoize-one.esm.js","webpack://ciqo/./node_modules/react-window/src/timer.js","webpack://ciqo/./node_modules/react-window/src/domHelpers.js","webpack://ciqo/./node_modules/react-window/src/createGridComponent.js","webpack://ciqo/./node_modules/react-window/src/VariableSizeGrid.js","webpack://ciqo/./node_modules/react-window/src/createListComponent.js","webpack://ciqo/./node_modules/react-window/src/VariableSizeList.js","webpack://ciqo/./node_modules/react-window/src/FixedSizeGrid.js","webpack://ciqo/./node_modules/react-window/src/FixedSizeList.js","webpack://ciqo/./node_modules/react-window/src/shallowDiffers.js","webpack://ciqo/./node_modules/react-window/src/areEqual.js","webpack://ciqo/./node_modules/react-window/src/shouldComponentUpdate.js"],"sourcesContent":["var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"names":["safeIsNaN","Number","isNaN","value","areInputsEqual","newInputs","lastInputs","length","i","first","second","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","arguments","this","apply","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","call","size","cachedRTLResult","getRTLOffsetType","recalculate","outerDiv","document","createElement","outerStyle","style","width","height","overflow","direction","innerDiv","innerStyle","appendChild","body","scrollLeft","removeChild","defaultItemKey","columnIndex","data","rowIndex","createGridComponent","_ref2","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_this","_instanceProps","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","clientWidth","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","_inheritsLoose","Grid","getDerivedStateFromProps","nextProps","validateSharedProps","_proto","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","div","offsetWidth","getScrollbarSize","estimatedTotalHeight","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","estimatedTotalWidth","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","findNearestItem","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","createListComponent","_ref","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","List","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","shouldComponentUpdate","nextState"],"sourceRoot":""}