{"version":3,"file":"5596.bundle.js","mappings":"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","sources":["webpack://ciqo/./node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js","webpack://ciqo/./node_modules/@mui/x-data-grid/hooks/utils/useGridApiRef.js","webpack://ciqo/./node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js","webpack://ciqo/./node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.js","webpack://ciqo/./node_modules/@mui/x-data-grid/components/DataGridColumnHeaders.js","webpack://ciqo/./node_modules/@mui/x-data-grid/DataGrid/DataGrid.js","webpack://ciqo/./node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js","webpack://ciqo/./node_modules/@mui/x-data-grid/models/gridEditRowModel.js","webpack://ciqo/./node_modules/@mui/x-data-grid/utils/utils.js","webpack://ciqo/./node_modules/@mui/x-data-grid/utils/warning.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildWarning } from '../../../utils/warning';\nconst sortModelDisableMultiColumnsSortingWarning = buildWarning(['MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nexport const sanitizeSortModel = (model, disableMultipleColumnsSorting) => {\n  if (disableMultipleColumnsSorting && model.length > 1) {\n    sortModelDisableMultiColumnsSortingWarning();\n    return [model[0]];\n  }\n\n  return model;\n};\nexport const mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => state => _extends({}, state, {\n  sorting: _extends({}, state.sorting, {\n    sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)\n  })\n});\n\nconst isDesc = direction => direction === 'desc';\n/**\n * Transform an item of the sorting model into a method comparing two rows.\n * @param {GridSortItem} sortItem The sort item we want to apply.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridParsedSortItem | null} The parsed sort item. Returns `null` is the sort item is not valid.\n */\n\n\nconst parseSortItem = (sortItem, apiRef) => {\n  const column = apiRef.current.getColumn(sortItem.field);\n\n  if (!column) {\n    return null;\n  }\n\n  const comparator = isDesc(sortItem.sort) ? (...args) => -1 * column.sortComparator(...args) : column.sortComparator;\n\n  const getSortCellParams = id => ({\n    id,\n    field: column.field,\n    rowNode: apiRef.current.getRowNode(id),\n    value: apiRef.current.getCellValue(id, column.field),\n    api: apiRef.current\n  });\n\n  return {\n    getSortCellParams,\n    comparator\n  };\n};\n\n/**\n * Compare two rows according to a list of valid sort items.\n * The `row1Params` and `row2Params` must have the same length as `parsedSortItems`,\n * and each of their index must contain the `GridSortCellParams` of the sort item with the same index.\n * @param {GridParsedSortItem[]} parsedSortItems All the sort items with which we want to compare the rows.\n * @param {GridRowAggregatedSortingParams} row1 The node and params of the 1st row for each sort item.\n * @param {GridRowAggregatedSortingParams} row2 The node and params of the 2nd row for each sort item.\n */\nconst compareRows = (parsedSortItems, row1, row2) => {\n  return parsedSortItems.reduce((res, item, index) => {\n    if (res !== 0) {\n      // return the results of the first comparator which distinguish the two rows\n      return res;\n    }\n\n    const sortCellParams1 = row1.params[index];\n    const sortCellParams2 = row2.params[index];\n    res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);\n    return res;\n  }, 0);\n};\n/**\n * Generates a method to easily sort a list of rows according to the current sort model.\n * @param {GridSortModel} sortModel The model with which we want to sort the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridSortingModelApplier | null} A method that generates a list of sorted row ids from a list of rows according to the current sort model. If `null`, we consider that the rows should remain in the order there were provided.\n */\n\n\nexport const buildAggregatedSortingApplier = (sortModel, apiRef) => {\n  const comparatorList = sortModel.map(item => parseSortItem(item, apiRef)).filter(comparator => !!comparator);\n\n  if (comparatorList.length === 0) {\n    return null;\n  }\n\n  return rowList => rowList.map(node => ({\n    node,\n    params: comparatorList.map(el => el.getSortCellParams(node.id))\n  })).sort((a, b) => compareRows(comparatorList, a, b)).map(row => row.node.id);\n};\nexport const getNextGridSortDirection = (sortingOrder, current) => {\n  const currentIdx = sortingOrder.indexOf(current);\n\n  if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {\n    return sortingOrder[0];\n  }\n\n  return sortingOrder[currentIdx + 1];\n};\n\nconst gridNillComparator = (v1, v2) => {\n  if (v1 == null && v2 != null) {\n    return -1;\n  }\n\n  if (v2 == null && v1 != null) {\n    return 1;\n  }\n\n  if (v1 == null && v2 == null) {\n    return 0;\n  }\n\n  return null;\n};\n\nconst collator = new Intl.Collator();\nexport const gridStringOrNumberComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  if (typeof value1 === 'string') {\n    return collator.compare(value1.toString(), value2.toString());\n  }\n\n  return value1 - value2;\n};\nexport const gridNumberComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  return Number(value1) - Number(value2);\n};\nexport const gridDateComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  if (value1 > value2) {\n    return 1;\n  }\n\n  if (value1 < value2) {\n    return -1;\n  }\n\n  return 0;\n};","import * as React from 'react';\n\n/**\n * Hook that instantiate a [[GridApiRef]].\n */\nexport const useGridApiRef = () => React.useRef({});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { DATA_GRID_DEFAULT_SLOTS_COMPONENTS, GRID_DEFAULT_LOCALE_TEXT } from '../constants';\nimport { GridDensityTypes, GridEditModes, GridFeatureModeConstant } from '../models';\nconst DATA_GRID_FORCED_PROPS = {\n  apiRef: undefined,\n  disableMultipleColumnsFiltering: true,\n  disableMultipleColumnsSorting: true,\n  disableMultipleSelection: true,\n  throttleRowsMs: undefined,\n  hideFooterRowCount: false,\n  pagination: true,\n  checkboxSelectionVisibleOnly: false,\n  disableColumnReorder: true,\n  disableColumnResize: true,\n  signature: 'DataGrid'\n};\nexport const MAX_PAGE_SIZE = 100;\n/**\n * The default values of `DataGridPropsWithDefaultValues` to inject in the props of DataGrid.\n */\n\nexport const DATA_GRID_PROPS_DEFAULT_VALUES = {\n  autoHeight: false,\n  autoPageSize: false,\n  checkboxSelection: false,\n  checkboxSelectionVisibleOnly: false,\n  columnBuffer: 3,\n  rowBuffer: 3,\n  columnThreshold: 3,\n  rowThreshold: 3,\n  density: GridDensityTypes.Standard,\n  disableExtendRowFullWidth: false,\n  disableColumnFilter: false,\n  disableColumnMenu: false,\n  disableColumnSelector: false,\n  disableDensitySelector: false,\n  disableMultipleColumnsFiltering: false,\n  disableMultipleSelection: false,\n  disableMultipleColumnsSorting: false,\n  disableSelectionOnClick: false,\n  disableVirtualization: false,\n  disableIgnoreModificationsIfProcessingProps: false,\n  editMode: GridEditModes.Cell,\n  filterMode: GridFeatureModeConstant.client,\n  headerHeight: 56,\n  hideFooter: false,\n  hideFooterPagination: false,\n  hideFooterRowCount: false,\n  hideFooterSelectedRowCount: false,\n  logger: console,\n  logLevel: process.env.NODE_ENV === 'production' ? 'error' : 'warn',\n  pagination: false,\n  paginationMode: GridFeatureModeConstant.client,\n  rowHeight: 52,\n  rowsPerPageOptions: [25, 50, 100],\n  rowSpacingType: 'margin',\n  showCellRightBorder: false,\n  showColumnRightBorder: false,\n  sortingOrder: ['asc', 'desc', null],\n  sortingMode: GridFeatureModeConstant.client,\n  throttleRowsMs: 0,\n  disableColumnReorder: false,\n  disableColumnResize: false,\n  keepNonExistentRowsSelected: false\n};\nexport const useDataGridProps = inProps => {\n  if (inProps.pageSize > MAX_PAGE_SIZE) {\n    throw new Error(`'props.pageSize' cannot exceed 100 in DataGrid.`);\n  }\n\n  const themedProps = useThemeProps({\n    props: inProps,\n    name: 'MuiDataGrid'\n  });\n  const localeText = React.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);\n  const components = React.useMemo(() => {\n    const overrides = themedProps.components;\n\n    if (!overrides) {\n      return _extends({}, DATA_GRID_DEFAULT_SLOTS_COMPONENTS);\n    }\n\n    const mergedComponents = {};\n    Object.entries(DATA_GRID_DEFAULT_SLOTS_COMPONENTS).forEach(([key, defaultComponent]) => {\n      mergedComponents[key] = overrides[key] === undefined ? defaultComponent : overrides[key];\n    });\n    return mergedComponents;\n  }, [themedProps.components]);\n  return React.useMemo(() => _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, themedProps, {\n    localeText,\n    components\n  }, DATA_GRID_FORCED_PROPS), [themedProps, localeText, components]);\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"disableVirtualization\"];\nimport * as React from 'react';\nimport { GridVirtualScroller } from './virtualization/GridVirtualScroller';\nimport { GridVirtualScrollerContent } from './virtualization/GridVirtualScrollerContent';\nimport { GridVirtualScrollerRenderZone } from './virtualization/GridVirtualScrollerRenderZone';\nimport { useGridVirtualScroller } from '../hooks/features/virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DataGridVirtualScroller = /*#__PURE__*/React.forwardRef(function DataGridVirtualScroller(props, ref) {\n  const {\n    className,\n    disableVirtualization\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    getRootProps,\n    getContentProps,\n    getRenderZoneProps,\n    getRows\n  } = useGridVirtualScroller({\n    ref,\n    disableVirtualization\n  });\n  return /*#__PURE__*/_jsx(GridVirtualScroller, _extends({\n    className: className\n  }, getRootProps(other), {\n    children: /*#__PURE__*/_jsx(GridVirtualScrollerContent, _extends({}, getContentProps(), {\n      children: /*#__PURE__*/_jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {\n        children: getRows()\n      }))\n    }))\n  }));\n});\nexport { DataGridVirtualScroller };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"innerRef\", \"className\"];\nimport * as React from 'react';\nimport { useGridColumnHeaders } from '../hooks/features/columnHeaders/useGridColumnHeaders';\nimport { GridScrollArea } from './GridScrollArea';\nimport { GridColumnHeaders } from './columnHeaders/GridColumnHeaders';\nimport { GridColumnHeadersInner } from './columnHeaders/GridColumnHeadersInner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DataGridColumnHeaders = /*#__PURE__*/React.forwardRef(function GridColumnsHeader(props, ref) {\n  const {\n    innerRef\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    isDragging,\n    getRootProps,\n    getInnerProps,\n    getColumnHeaders,\n    getColumnGroupHeaders\n  } = useGridColumnHeaders({\n    innerRef\n  });\n  return /*#__PURE__*/_jsxs(GridColumnHeaders, _extends({\n    ref: ref\n  }, getRootProps(other), {\n    children: [/*#__PURE__*/_jsx(GridScrollArea, {\n      scrollDirection: \"left\"\n    }), /*#__PURE__*/_jsxs(GridColumnHeadersInner, _extends({\n      isDragging: isDragging\n    }, getInnerProps(), {\n      children: [getColumnGroupHeaders(), getColumnHeaders()]\n    })), /*#__PURE__*/_jsx(GridScrollArea, {\n      scrollDirection: \"right\"\n    })]\n  }));\n});","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot } from '../components';\nimport { GridContextProvider } from '../context/GridContextProvider';\nimport { useDataGridComponent } from './useDataGridComponent';\nimport { useDataGridProps, MAX_PAGE_SIZE } from './useDataGridProps';\nimport { DataGridVirtualScroller } from '../components/DataGridVirtualScroller';\nimport { DataGridColumnHeaders } from '../components/DataGridColumnHeaders';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const apiRef = useDataGridComponent(props);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridColumnHeaders,\n          VirtualScrollerComponent: DataGridVirtualScroller\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: chainPropTypes(PropTypes.array.isRequired, props => {\n    // @ts-ignore because otherwise `build:api` doesn't work\n    if (props.columns && props.columns.some(column => column.resizable)) {\n      return new Error([`MUI: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, modification to a cell will not be discarded if the mode is changed from \"edit\" to \"view\" while processing props.\n   * @default false\n   */\n  disableIgnoreModificationsIfProcessingProps: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    columnGrouping: PropTypes.bool,\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGrid.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containig which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containig which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: chainPropTypes(PropTypes.number, props => {\n    if (props.pageSize && props.pageSize > MAX_PAGE_SIZE) {\n      return new Error([`MUI: \\`<DataGrid pageSize={${props.pageSize}} />\\` is not a valid prop.`, `Only page size below ${MAX_PAGE_SIZE} is available in the MIT version.`, '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n\n    return null;\n  }),\n  pagination: props => {\n    if (props.pagination === false) {\n      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination.'].join('\\n'));\n    }\n\n    return null;\n  },\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.array.isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: chainPropTypes(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]), props => {\n    if (!props.checkboxSelection && Array.isArray(props.selectionModel) && props.selectionModel.length > 1) {\n      return new Error([`MUI: \\`<DataGrid selectionModel={${JSON.stringify(props.selectionModel)}} />\\` is not a valid prop.`, 'selectionModel can only be of 1 item in DataGrid.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n};","import { useGridInitialization } from '../hooks/core/useGridInitialization';\nimport { useGridInitializeState } from '../hooks/utils/useGridInitializeState';\nimport { useGridClipboard } from '../hooks/features/clipboard/useGridClipboard';\nimport { columnMenuStateInitializer, useGridColumnMenu } from '../hooks/features/columnMenu/useGridColumnMenu';\nimport { useGridColumns, columnsStateInitializer } from '../hooks/features/columns/useGridColumns';\nimport { densityStateInitializer, useGridDensity } from '../hooks/features/density/useGridDensity';\nimport { useGridCsvExport } from '../hooks/features/export/useGridCsvExport';\nimport { useGridPrintExport } from '../hooks/features/export/useGridPrintExport';\nimport { useGridFilter, filterStateInitializer } from '../hooks/features/filter/useGridFilter';\nimport { focusStateInitializer, useGridFocus } from '../hooks/features/focus/useGridFocus';\nimport { useGridKeyboardNavigation } from '../hooks/features/keyboardNavigation/useGridKeyboardNavigation';\nimport { useGridPagination, paginationStateInitializer } from '../hooks/features/pagination/useGridPagination';\nimport { useGridPreferencesPanel, preferencePanelStateInitializer } from '../hooks/features/preferencesPanel/useGridPreferencesPanel';\nimport { useGridEditing as useGridEditing_old, editingStateInitializer as editingStateInitializer_old } from '../hooks/features/editRows/useGridEditing.old';\nimport { useGridEditing as useGridEditing_new, editingStateInitializer as editingStateInitializer_new } from '../hooks/features/editRows/useGridEditing.new';\nimport { useGridRows, rowsStateInitializer } from '../hooks/features/rows/useGridRows';\nimport { useGridRowsPreProcessors } from '../hooks/features/rows/useGridRowsPreProcessors';\nimport { useGridParamsApi } from '../hooks/features/rows/useGridParamsApi';\nimport { selectionStateInitializer, useGridSelection } from '../hooks/features/selection/useGridSelection';\nimport { useGridSelectionPreProcessors } from '../hooks/features/selection/useGridSelectionPreProcessors';\nimport { useGridSorting, sortingStateInitializer } from '../hooks/features/sorting/useGridSorting';\nimport { useGridScroll } from '../hooks/features/scroll/useGridScroll';\nimport { useGridEvents } from '../hooks/features/events/useGridEvents';\nimport { useGridDimensions } from '../hooks/features/dimensions/useGridDimensions';\nimport { rowsMetaStateInitializer, useGridRowsMeta } from '../hooks/features/rows/useGridRowsMeta';\nimport { useGridStatePersistence } from '../hooks/features/statePersistence/useGridStatePersistence';\nimport { useGridColumnSpanning } from '../hooks/features/columns/useGridColumnSpanning';\nimport { useGridColumnGrouping, columnGroupsStateInitializer } from '../hooks/features/columnGrouping/useGridColumnGrouping';\nimport { useGridColumnGroupingPreProcessors } from '../hooks/features/columnGrouping/useGridColumnGroupingPreProcessors';\nexport const useDataGridComponent = props => {\n  var _props$experimentalFe, _props$experimentalFe2;\n\n  const apiRef = useGridInitialization(undefined, props);\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n\n  useGridColumnGroupingPreProcessors(apiRef, props);\n  useGridSelectionPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n  /**\n   * Register all state initializers here.\n   */\n\n  useGridInitializeState(selectionStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer_new : editingStateInitializer_old, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridSelection(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  const useGridEditing = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing_new : useGridEditing_old;\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};","// TODO v6: rename to GridEditingState\nvar GridEditModes;\n\n(function (GridEditModes) {\n  GridEditModes[\"Cell\"] = \"cell\";\n  GridEditModes[\"Row\"] = \"row\";\n})(GridEditModes || (GridEditModes = {}));\n\nvar GridCellModes;\n\n(function (GridCellModes) {\n  GridCellModes[\"Edit\"] = \"edit\";\n  GridCellModes[\"View\"] = \"view\";\n})(GridCellModes || (GridCellModes = {}));\n\nvar GridRowModes;\n\n(function (GridRowModes) {\n  GridRowModes[\"Edit\"] = \"edit\";\n  GridRowModes[\"View\"] = \"view\";\n})(GridRowModes || (GridRowModes = {}));\n\nexport { GridEditModes, GridCellModes, GridRowModes };","export function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\nexport function isObject(value) {\n  return typeof value === 'object';\n}\nexport function localStorageAvailable() {\n  try {\n    // Incognito mode might reject access to the localStorage for security reasons.\n    // window isn't defined on Node.js\n    // https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available\n    const key = '__some_random_key_you_are_not_going_to_use__';\n    window.localStorage.setItem(key, key);\n    window.localStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nexport function escapeRegExp(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n/**\n * Follows the CSS specification behavior for min and max\n * If min > max, then the min have priority\n */\n\nexport const clamp = (value, min, max) => Math.max(min, Math.min(max, value));\n/**\n * Based on `fast-deep-equal`\n *\n *  MIT License\n *\n * Copyright (c) 2017 Evgeny Poberezkin\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * We only type the public interface to avoid dozens of `as` in the function.\n */\n\nexport function isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (Array.isArray(a)) {\n      const length = a.length;\n\n      if (length !== b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < length; i += 1) {\n        if (!isDeepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      const entriesA = Array.from(a.entries());\n\n      for (let i = 0; i < entriesA.length; i += 1) {\n        if (!b.has(entriesA[i][0])) {\n          return false;\n        }\n      }\n\n      for (let i = 0; i < entriesA.length; i += 1) {\n        const entryA = entriesA[i];\n\n        if (!isDeepEqual(entryA[1], b.get(entryA[0]))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      const entries = Array.from(a.entries());\n\n      for (let i = 0; i < entries.length; i += 1) {\n        if (!b.has(entries[i][0])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      const length = a.length;\n\n      if (length !== b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < length; i += 1) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf();\n    }\n\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString();\n    }\n\n    const keys = Object.keys(a);\n    const length = keys.length;\n\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n\n    for (let i = 0; i < length; i += 1) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < length; i += 1) {\n      const key = keys[i];\n\n      if (!isDeepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n} // Pseudo random number. See https://stackoverflow.com/a/47593316\n\nfunction mulberry32(a) {\n  return () => {\n    /* eslint-disable */\n    let t = a += 0x6d2b79f5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    /* eslint-enable */\n  };\n}\n\nexport function randomNumberBetween(seed, min, max) {\n  const random = mulberry32(seed);\n  return () => min + (max - min) * random();\n}\nexport function deepClone(obj) {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(obj);\n  }\n\n  return JSON.parse(JSON.stringify(obj));\n}","export const buildWarning = (message, gravity = 'warning') => {\n  let alreadyWarned = false;\n  const cleanMessage = Array.isArray(message) ? message.join('\\n') : message;\n  return () => {\n    if (!alreadyWarned) {\n      alreadyWarned = true;\n\n      if (gravity === 'error') {\n        console.error(cleanMessage);\n      } else {\n        console.warn(cleanMessage);\n      }\n    }\n  };\n};\nexport const wrapWithWarningOnCall = (method, message) => {\n  if (process.env.NODE_ENV === 'production') {\n    return method;\n  }\n\n  const warning = buildWarning(message);\n  return (...args) => {\n    warning();\n    return method(...args);\n  };\n};"],"names":["sortModelDisableMultiColumnsSortingWarning","buildWarning","sanitizeSortModel","model","disableMultipleColumnsSorting","length","mergeStateWithSortModel","sortModel","state","_extends","sorting","buildAggregatedSortingApplier","apiRef","comparatorList","map","item","sortItem","column","current","getColumn","field","comparator","sort","sortComparator","getSortCellParams","id","rowNode","getRowNode","value","getCellValue","api","parseSortItem","filter","rowList","node","params","el","a","b","row1","row2","reduce","res","index","sortCellParams1","sortCellParams2","row","getNextGridSortDirection","sortingOrder","currentIdx","indexOf","gridNillComparator","v1","v2","collator","Intl","Collator","gridStringOrNumberComparator","value1","value2","nillResult","compare","toString","gridNumberComparator","Number","gridDateComparator","useGridApiRef","React","DATA_GRID_FORCED_PROPS","undefined","disableMultipleColumnsFiltering","disableMultipleSelection","throttleRowsMs","hideFooterRowCount","pagination","checkboxSelectionVisibleOnly","disableColumnReorder","disableColumnResize","signature","MAX_PAGE_SIZE","DATA_GRID_PROPS_DEFAULT_VALUES","autoHeight","autoPageSize","checkboxSelection","columnBuffer","rowBuffer","columnThreshold","rowThreshold","density","GridDensityTypes","disableExtendRowFullWidth","disableColumnFilter","disableColumnMenu","disableColumnSelector","disableDensitySelector","disableSelectionOnClick","disableVirtualization","disableIgnoreModificationsIfProcessingProps","editMode","GridEditModes","filterMode","GridFeatureModeConstant","headerHeight","hideFooter","hideFooterPagination","hideFooterSelectedRowCount","logger","console","logLevel","paginationMode","rowHeight","rowsPerPageOptions","rowSpacingType","showCellRightBorder","showColumnRightBorder","sortingMode","keepNonExistentRowsSelected","_excluded","DataGridVirtualScroller","props","ref","className","other","_objectWithoutPropertiesLoose","useGridVirtualScroller","getRootProps","getContentProps","getRenderZoneProps","getRows","_jsx","GridVirtualScroller","children","GridVirtualScrollerContent","GridVirtualScrollerRenderZone","DataGridColumnHeaders","innerRef","useGridColumnHeaders","isDragging","getInnerProps","getColumnHeaders","getColumnGroupHeaders","_jsxs","GridColumnHeaders","GridScrollArea","scrollDirection","GridColumnHeadersInner","DataGridRaw","inProps","pageSize","Error","themedProps","useThemeProps","name","localeText","GRID_DEFAULT_LOCALE_TEXT","components","overrides","DATA_GRID_DEFAULT_SLOTS_COMPONENTS","mergedComponents","Object","entries","forEach","key","defaultComponent","useDataGridProps","_props$experimentalFe","_props$experimentalFe2","useGridInitialization","useGridColumnGroupingPreProcessors","useGridSelectionPreProcessors","useGridRowsPreProcessors","useGridInitializeState","selectionStateInitializer","columnsStateInitializer","columnGroupsStateInitializer","rowsStateInitializer","experimentalFeatures","newEditingApi","editingStateInitializer_new","editingStateInitializer_old","focusStateInitializer","sortingStateInitializer","preferencePanelStateInitializer","filterStateInitializer","densityStateInitializer","paginationStateInitializer","rowsMetaStateInitializer","columnMenuStateInitializer","useGridKeyboardNavigation","useGridSelection","useGridColumns","useGridRows","useGridParamsApi","useGridColumnSpanning","useGridColumnGrouping","useGridEditing_new","useGridEditing_old","useGridFocus","useGridPreferencesPanel","useGridFilter","useGridSorting","useGridDensity","useGridPagination","useGridRowsMeta","useGridScroll","useGridColumnMenu","useGridCsvExport","useGridPrintExport","useGridClipboard","useGridDimensions","useGridEvents","useGridStatePersistence","useDataGridComponent","GridContextProvider","GridRoot","style","sx","GridErrorHandler","GridHeaderPlaceholder","GridBody","ColumnHeadersComponent","VirtualScrollerComponent","GridFooterPlaceholder","DataGrid","propTypes","PropTypes","cellModesModel","classes","columnGroupingModel","columns","chainPropTypes","some","resizable","join","columnTypes","columnVisibilityModel","componentsProps","editRowsModel","error","columnGrouping","preventCommitWhileValidating","warnIfFocusStateIsNotSynced","filterModel","items","columnField","operatorValue","isRequired","linkOperator","quickFilterLogicOperator","quickFilterValues","getCellClassName","getDetailPanelContent","getEstimatedRowHeight","getRowClassName","getRowHeight","getRowId","getRowSpacing","initialState","isCellEditable","isRowSelectable","loading","debug","info","warn","nonce","onCellClick","onCellDoubleClick","onCellEditCommit","onCellEditStart","onCellEditStop","onCellFocusOut","onCellKeyDown","onCellModesModelChange","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnVisibilityChange","onColumnVisibilityModelChange","onEditCellPropsChange","onEditRowsModelChange","onError","onFilterModelChange","onMenuClose","onMenuOpen","onPageChange","onPageSizeChange","onPreferencePanelClose","onPreferencePanelOpen","onProcessRowUpdateError","onResize","onRowClick","onRowDoubleClick","onRowEditCommit","onRowEditStart","onRowEditStop","onRowModesModelChange","onSelectionModelChange","onSortModelChange","onStateChange","page","processRowUpdate","rowCount","rowModesModel","rows","scrollbarSize","selectionModel","Array","isArray","JSON","stringify","GridCellModes","GridRowModes","isNumber","isFunction","localStorageAvailable","window","localStorage","setItem","removeItem","err","escapeRegExp","replace","clamp","min","max","Math","isDeepEqual","constructor","i","Map","size","entriesA","from","has","entryA","get","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","prototype","keys","hasOwnProperty","call","randomNumberBetween","seed","random","t","imul","deepClone","obj","structuredClone","parse","message","gravity","alreadyWarned","cleanMessage","wrapWithWarningOnCall","method"],"sourceRoot":""}